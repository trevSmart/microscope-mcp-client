#!/bin/bash

# Script per crear una release i publicar autom√†ticament
set -e

# Parsing d'arguments
SKIP_TESTS=false
while [[ $# -gt 0 ]]; do
    case $1 in
        --skip-tests)
            SKIP_TESTS=true
            shift
            ;;
        *)
            echo "Argument desconegut: $1"
            echo "√ös: $0 [--skip-tests] [versi√≥] [missatge]"
            exit 1
            ;;
    esac
done

# Verificacions de seguretat
echo "üîç Verificant configuraci√≥ del projecte..."

# Verificar que estem al directori arrel del projecte
if [ ! -f "package.json" ]; then
    echo "Error: No es troba package.json. Executa aquest script des del directori arrel del projecte."
    exit 1
fi

echo "‚úÖ Configuraci√≥ del projecte verificada correctament"

# Funci√≥ per obtenir la versi√≥ actual del package.json
get_current_version() {
    node -p "require('./package.json').version"
}

# Funci√≥ per incrementar la versi√≥ patch
increment_patch() {
    local version=$1
    local major=$(echo $version | cut -d. -f1)
    local minor=$(echo $version | cut -d. -f2)
    local patch=$(echo $version | cut -d. -f3)
    echo "$major.$minor.$((patch + 1))"
}

# Funci√≥ per implementar timeout en macOS
run_with_timeout() {
    local timeout_duration=$1
    shift

    # Iniciar el comando en background
    "$@" &
    local cmd_pid=$!

    # Esperar el timeout o que el comando acabi
    local count=0
    while [ $count -lt $timeout_duration ]; do
        if ! kill -0 $cmd_pid 2>/dev/null; then
            # El comando ha acabat
            wait $cmd_pid
            return $?
        fi
        sleep 1
        count=$((count + 1))
    done

    # Timeout arribat, matar el proc√©s
    kill $cmd_pid 2>/dev/null
    return 124
}

# Obtenir la versi√≥ actual
CURRENT_VERSION=$(get_current_version)
echo "üìã Versi√≥ actual: $CURRENT_VERSION"

# Missatge d'inici
echo ""
echo "üöÄ Iniciant creaci√≥ de release per al client MCP..."
if [ "$SKIP_TESTS" = true ]; then
    echo "‚ö†Ô∏è  Mode: Saltant tests locals (--skip-tests especificat)"
else
    echo "‚úÖ Mode: Executant tests locals abans de la publicaci√≥"
fi
echo ""

# Demanar la nova versi√≥
if [ $# -eq 0 ]; then
    DEFAULT_VERSION=$(increment_patch $CURRENT_VERSION)
    echo "üí° Versi√≥ suggerida (patch increment): $DEFAULT_VERSION"
    read -p "üî¢ Introdueix la nova versi√≥ [$DEFAULT_VERSION]: " NEW_VERSION
    NEW_VERSION=${NEW_VERSION:-$DEFAULT_VERSION}

    read -p "üìù Missatge de la release (opcional): " MESSAGE
    MESSAGE=${MESSAGE:-"Release $NEW_VERSION"}
else
    NEW_VERSION=$1
    MESSAGE=${2:-"Release $NEW_VERSION"}
fi

VERSION=$NEW_VERSION

echo "üöÄ Creant release $VERSION..."

# 0. Comprovar si hi ha canvis pendents
echo "üîç Comprovant estat del repositori..."
if ! git diff-index --quiet HEAD --; then
    echo "‚ùå Error: Hi ha canvis sense commit al working directory."
    echo "   Fes commit dels canvis abans de crear una release."
    git status --short
    exit 1
fi

if ! git diff-index --quiet --cached HEAD --; then
    echo "‚ùå Error: Hi ha canvis staged sense commit."
    echo "   Fes commit dels canvis abans de crear una release."
    git status --short
    exit 1
fi

# Comprovar si hi ha commits locals que no s'han pujat
if [ "$(git rev-list --count @{u}..HEAD)" -gt 0 ]; then
    echo "‚ùå Error: Hi ha commits locals que no s'han pujat al repositori remot."
    echo "   Fes push dels commits abans de crear una release."
    echo "   Commits pendents:"
    git log --oneline @{u}..HEAD
    exit 1
fi

echo "‚úÖ Repositori sincronitzat correctament."

# 1. Build del projecte
echo "üî® Compilant el projecte..."
echo "   Executant: npm run build"
npm run build

# Verificacions locals del build
echo ""
echo "üîç Verificant build generat..."
echo "   Comprovant integritat del fitxer build/index.js..."

# Verificar que el fitxer build existeix
if [ ! -f "build/index.js" ]; then
    echo "Error: El fitxer build/index.js no s'ha generat correctament."
    exit 1
fi

# Afegir permisos d'execuci√≥
echo "   Afegint permisos d'execuci√≥..."
chmod +x build/index.js

# Verificar permisos d'execuci√≥
echo "   Verificant permisos d'execuci√≥..."
if [ ! -x "build/index.js" ]; then
    echo "Error: El fitxer build/index.js no t√© permisos d'execuci√≥."
    exit 1
fi

# Verificar shebang
echo "   Verificant shebang..."
if ! head -n1 "build/index.js" | grep -q "#!/usr/bin/env node"; then
    echo "Error: El shebang no est√† present al fitxer build/index.js."
    exit 1
fi

echo "‚úÖ Build generat i verificat correctament"
echo "   ‚úì Fitxer build/index.js existeix"
echo "   ‚úì Permisos d'execuci√≥ configurats"
echo "   ‚úì Shebang present"

# Executar proves pr√®vies ABANS de qualsevol operaci√≥ de publicaci√≥ (si no es salten)
if [ "$SKIP_TESTS" = false ]; then
    echo ""
    echo "üß™ Executant proves pr√®vies per verificar que el client funciona..."
    echo "   Aquests tests validen la compatibilitat amb diferents servidors MCP"
    echo ""

    # Test 1: Mode one-shot amb servidor Salesforce MCP
    echo "Prova 1/5: Testant mode one-shot amb servidor Salesforce MCP..."
    TEST_OUTPUT=$(run_with_timeout 30 node build/index.js --server "/Users/marcpla/Documents/Feina/Projectes/mcp/ibm-salesforce-mcp/index.js" --call-tool 'salesforceMcpUtils {"action":"getCurrentDatetime"}' 2>&1)
    TEST_EXIT_CODE=$?

    if [ $TEST_EXIT_CODE -eq 0 ]; then
        echo -e "Mode one-shot (Salesforce MCP): \033[32m‚úì PASS\033[0m"
        echo ""
    elif [ $TEST_EXIT_CODE -eq 124 ]; then
        echo "‚ùå Mode one-shot (Salesforce MCP): TIMEOUT (30s)"
        echo "   Detalls de l'error:"
        echo "   $TEST_OUTPUT" | sed 's/^/   /'
        echo ""
        echo "   Abortant publicaci√≥ per evitar distribuir una versi√≥ defectuosa."
        echo "   Prem Enter per continuar..."
        read
        exit 1
    else
        echo "‚ùå Mode one-shot (Salesforce MCP): FALLAT"
        echo "   Detalls de l'error:"
        echo "   $TEST_OUTPUT" | sed 's/^/   /'
        echo ""
        echo "   Abortant publicaci√≥ per evitar distribuir una versi√≥ defectuosa."
        echo "   Prem Enter per continuar..."
        read
        exit 1
    fi

    # Test 2: Mode CLI amb servidor Salesforce MCP
    echo "Prova 2/5: Testant mode CLI amb servidor Salesforce MCP..."
    TEST_OUTPUT=$(run_with_timeout 60 node scripts/test.mjs --server "/Users/marcpla/Documents/Feina/Projectes/mcp/ibm-salesforce-mcp/index.js" --automated 2>&1)
    TEST_EXIT_CODE=$?

    if [ $TEST_EXIT_CODE -eq 0 ]; then
        echo -e "Mode CLI (Salesforce MCP): \033[32m‚úì PASS\033[0m"
        echo ""
    elif [ $TEST_EXIT_CODE -eq 124 ]; then
        echo "‚ö†Ô∏è  Mode CLI (Salesforce MCP): TIMEOUT (60s)"
        echo "   Detalls de l'error:"
        echo "   $TEST_OUTPUT" | sed 's/^/   /'
        echo "   El mode CLI t√© problemes de rendiment amb Salesforce MCP per√≤ altres tests funcionen."
        echo "   Continuant amb la publicaci√≥ ja que altres funcionalitats funcionen."
    else
        echo "‚ùå Mode CLI (Salesforce MCP): FALLAT"
        echo "   Detalls de l'error:"
        echo "   $TEST_OUTPUT" | sed 's/^/   /'
        echo ""
        echo "   El client t√© problemes amb el servidor Salesforce MCP."
        echo "   Abortant publicaci√≥ per evitar distribuir una versi√≥ defectuosa."
        echo "   Prem Enter per continuar..."
        read
        exit 1
    fi

    # Test 3: Mode one-shot amb servidor Everything MCP
    echo "Prova 3/5: Testant mode one-shot amb servidor Everything MCP..."
    TEST_OUTPUT=$(run_with_timeout 30 node build/index.js --server "npx:@modelcontextprotocol/server-everything -y stdio" --call-tool 'echo {"message":"hello"}' 2>&1)
    TEST_EXIT_CODE=$?

    if [ $TEST_EXIT_CODE -eq 0 ]; then
        echo -e "Mode one-shot (Everything MCP): \033[32m‚úì PASS\033[0m"
        echo ""
    elif [ $TEST_EXIT_CODE -eq 124 ]; then
        echo "‚ùå Mode one-shot (Everything MCP): TIMEOUT (30s)"
        echo "   Detalls de l'error:"
        echo "   $TEST_OUTPUT" | sed 's/^/   /'
        echo ""
        echo "   El client no funciona correctament amb el servidor Everything MCP."
        echo "   Abortant publicaci√≥ per evitar distribuir una versi√≥ defectuosa."
        echo "   Prem Enter per continuar..."
        read
        exit 1
    else
        echo "‚ùå Mode one-shot (Everything MCP): FALLAT"
        echo "   Detalls de l'error:"
        echo "   $TEST_OUTPUT" | sed 's/^/   /'
        echo ""
        echo "   El client no funciona correctament amb el servidor Everything MCP."
        echo "   Abortant publicaci√≥ per evitar distribuir una versi√≥ defectuosa."
        echo "   Prem Enter per continuar..."
        read
        exit 1
    fi

    # Test 4: Mode CLI amb servidor Everything MCP
    echo "Prova 4/5: Testant mode CLI amb servidor Everything MCP..."
    TEST_OUTPUT=$(run_with_timeout 60 node scripts/test.mjs --server "npx:@modelcontextprotocol/server-everything -y stdio" --automated 2>&1)
    TEST_EXIT_CODE=$?

    if [ $TEST_EXIT_CODE -eq 0 ]; then
        echo -e "Mode CLI (Everything MCP): \033[32m‚úì PASS\033[0m"
        echo ""
    elif [ $TEST_EXIT_CODE -eq 124 ]; then
        echo "‚ö†Ô∏è  Mode CLI (Everything MCP): TIMEOUT (60s)"
        echo "   Detalls de l'error:"
        echo "   $TEST_OUTPUT" | sed 's/^/   /'
        echo "   El mode CLI t√© problemes de rendiment amb Everything MCP per√≤ altres tests funcionen."
        echo "   Continuant amb la publicaci√≥ ja que altres funcionalitats funcionen."
    else
        echo "‚ùå Mode CLI (Everything MCP): FALLAT"
        echo "   Detalls de l'error:"
        echo "   $TEST_OUTPUT" | sed 's/^/   /'
        echo ""
        echo "   El client t√© problemes amb el servidor Everything MCP."
        echo "   Abortant publicaci√≥ per evitar distribuir una versi√≥ defectuosa."
        echo "   Prem Enter per continuar..."
        read
        exit 1
    fi

    # Test 5: Test de llibreria amb servidor Everything MCP
    echo "Prova 5/5: Testant mode llibreria amb servidor Everything MCP..."
    TEST_OUTPUT=$(run_with_timeout 45 node scripts/test-library.mjs 2>&1)
    TEST_EXIT_CODE=$?

    if [ $TEST_EXIT_CODE -eq 0 ]; then
        echo -e "Test de llibreria (Everything MCP): \033[32m‚úì PASS\033[0m"
        echo ""
    elif [ $TEST_EXIT_CODE -eq 124 ]; then
        echo "‚ùå Test de llibreria (Everything MCP): TIMEOUT (45s)"
        echo "   Detalls de l'error:"
        echo "   $TEST_OUTPUT" | sed 's/^/   /'
        echo ""
        echo "   El test de llibreria no funciona correctament."
        echo "   Abortant publicaci√≥ per evitar distribuir una versi√≥ defectuosa."
        echo "   Prem Enter per continuar..."
        read
        exit 1
    else
        echo "‚ùå Test de llibreria (Everything MCP): FALLAT"
        echo "   Detalls de l'error:"
        echo "   $TEST_OUTPUT" | sed 's/^/   /'
        echo ""
        echo "   El test de llibreria no funciona correctament."
        echo "   Abortant publicaci√≥ per evitar distribuir una versi√≥ defectuosa."
        echo "   Prem Enter per continuar..."
        read
        exit 1
    fi

    echo "‚úÖ Totes les proves pr√®vies completades"
    echo "   ‚úì Mode one-shot (Salesforce MCP): Funcionant"
    echo "   ‚úì Mode CLI (Salesforce MCP): Funcionant"
    echo "   ‚úì Mode one-shot (Everything MCP): Funcionant"
    echo "   ‚úì Mode CLI (Everything MCP): Funcionant"
    echo "   ‚úì Mode llibreria (Everything MCP): Funcionant"
    echo ""
else
    echo ""
    echo "‚ö†Ô∏è  Saltant proves pr√®vies (--skip-tests especificat)"
    echo "   ‚ö†Ô∏è  ATENCI√ì: No s'han validat les funcionalitats del client"
    echo ""
fi

# Creaci√≥ de la release
echo "üì¶ Creant release $VERSION..."
echo "   Aquest proc√©s crear√† una nova versi√≥ i la publicar√† autom√†ticament"
echo ""

# 1. Actualitzar package.json
echo "üìù Actualitzant package.json a versi√≥ $VERSION..."
echo "   Executant: npm version $VERSION --no-git-tag-version"
npm version $VERSION --no-git-tag-version

# 2. Commit dels canvis
echo "üìù Fent commit dels canvis de versi√≥..."
echo "   Afegint package.json al staging area..."
git add package.json
echo "   Creant commit amb missatge: 'Bump version to $VERSION'"
git commit -m "Bump version to $VERSION"

# 3. Crear tag
echo "üè∑Ô∏è  Creant tag v$VERSION..."
echo "   Executant: git tag v$VERSION"
git tag "v$VERSION"

# 4. Push dels canvis i tag
echo "üì§ Pujant canvis i tag al repositori remot..."
echo "   Pujant commits a origin/main..."
git push origin main
echo "   Pujant tag v$VERSION..."
git push origin "v$VERSION"

# 5. Crear release a GitHub (requereix GitHub CLI)
echo "üìã Creant release a GitHub..."
if command -v gh &> /dev/null; then
    echo "   GitHub CLI detectat, creant release autom√†ticament..."
    echo "   Executant: gh release create v$VERSION --title 'Release $VERSION' --notes '$MESSAGE'"
    gh release create "v$VERSION" --title "Release $VERSION" --notes "$MESSAGE"
    echo "   ‚úÖ Release creat amb √®xit a GitHub"
else
    echo "   ‚ö†Ô∏è  GitHub CLI no est√† instal¬∑lat"
    echo "   üìù Crea la release manualment a GitHub:"
    echo "   üîó URL: https://github.com/trevSmart/microscope-mcp-client/releases/new?tag=v$VERSION"
fi

echo ""
echo "üéâ Release $VERSION creat amb √®xit!"
echo ""
echo "üìã Resum de l'operaci√≥:"
echo "   üì¶ Versi√≥ anterior: $CURRENT_VERSION"
echo "   üì¶ Versi√≥ nova: $VERSION"
echo "   üè∑Ô∏è  Tag creat: v$VERSION"
echo "   üì§ Commits pujats a origin/main"
echo "   üì§ Tag pujat a origin"
if command -v gh &> /dev/null; then
    echo "   üìã Release creat a GitHub"
else
    echo "   ‚ö†Ô∏è  Release pendent de crear manualment a GitHub"
fi
echo ""
echo "üîÑ Pr√≤xims passos:"
echo "   ‚Ä¢ El workflow de GitHub Actions publicar√† autom√†ticament a npm"
echo "   ‚Ä¢ El paquet estar√† disponible com a @trevsmart/microscope-mcp-client"
echo "   ‚Ä¢ Els usuaris podran instal¬∑lar-lo amb: npm install @trevsmart/microscope-mcp-client"
echo ""

# Actualitzaci√≥ autom√†tica del servidor dependent (si la publicaci√≥ ha anat b√©)
echo "üîó Actualitzaci√≥ autom√†tica del servidor dependent..."
echo "   Comprovant si la nova versi√≥ est√† disponible a npm..."

# Configuraci√≥ del servidor
SERVER_DIR="/Users/marcpla/Documents/Feina/Projectes/mcp/ibm-salesforce-mcp"
CLIENT_PACKAGE_NAME="microscope"

# Verificar que el directori del servidor existeix
if [ ! -d "$SERVER_DIR" ]; then
    echo "   ‚ö†Ô∏è  No es troba el directori del servidor: $SERVER_DIR"
    echo "   üìù Actualitza manualment la depend√®ncia al servidor quan sigui convenient"
    echo ""
else
    if [ ! -f "$SERVER_DIR/package.json" ]; then
        echo "   ‚ö†Ô∏è  No es troba package.json al directori del servidor"
        echo "   üìù Actualitza manualment la depend√®ncia al servidor quan sigui convenient"
        echo ""
    else
        echo "   üì¶ Nova versi√≥ del client: $VERSION"

        # Anar al directori del servidor
        cd "$SERVER_DIR"

        # Obtenir la versi√≥ actual de la depend√®ncia del client al servidor
        CURRENT_CLIENT_VERSION=$(node -p "require('./package.json').dependencies['$CLIENT_PACKAGE_NAME'] || require('./package.json').devDependencies['$CLIENT_PACKAGE_NAME'] || 'no instal¬∑lat'")
        echo "   üì¶ Versi√≥ actual del client al servidor: $CURRENT_CLIENT_VERSION"

        # Actualitzar la depend√®ncia del client al servidor
        echo "   üì¶ Actualitzant depend√®ncia del client al servidor..."

        # Modificar directament el package.json del servidor amb la nova versi√≥
        echo "   üìù Modificant package.json del servidor..."
        if node -e "
          const pkg = require('./package.json');
          if (pkg.dependencies && pkg.dependencies['$CLIENT_PACKAGE_NAME']) {
            pkg.dependencies['$CLIENT_PACKAGE_NAME'] = '$VERSION';
            require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
            console.log('‚úÖ Depend√®ncia actualitzada a versi√≥ $VERSION');
          } else if (pkg.devDependencies && pkg.devDependencies['$CLIENT_PACKAGE_NAME']) {
            pkg.devDependencies['$CLIENT_PACKAGE_NAME'] = '$VERSION';
            require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
            console.log('‚úÖ DevDepend√®ncia actualitzada a versi√≥ $VERSION');
          } else {
            console.log('‚ùå No es troba la depend√®ncia $CLIENT_PACKAGE_NAME');
            process.exit(1);
          }
        "; then
          echo "   ‚úÖ Package.json del servidor actualitzat"

          # Espera 15 segons a que la nova versi√≥ del pkg estigui visible a npm
          echo ""
          echo "   ‚è∞ Esperant 15 segons a que la nova versi√≥ estigui visible a npm..."
          sleep 15

          # Instal¬∑lar la nova depend√®ncia
          echo "   üîÑ Instal¬∑lant la nova depend√®ncia..."
          npm install ibm-test-mcp-client@latest --save-dev
          echo "   ‚úÖ Depend√®ncia del client actualitzada amb √®xit!"

          echo ""
          echo "   üìã Resum de canvis al servidor:"
          echo "      üì¶ Client: $VERSION"
          echo "      üì¶ Depend√®ncia al servidor: $CURRENT_CLIENT_VERSION ‚Üí $VERSION"
          echo "      üì¶ Servidor actualitzat amb: $CLIENT_PACKAGE_NAME@$VERSION"
        else
          echo "   ‚ùå Error actualitzant package.json del servidor"
          echo "   üìù Actualitza manualment la depend√®ncia al servidor quan sigui convenient"
        fi

        # Tornar al directori original
        cd - > /dev/null
        echo ""
    fi
fi
