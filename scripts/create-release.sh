#!/bin/bash

# Script per crear una release i publicar autom√†ticament
set -e

# Funci√≥ per obtenir la versi√≥ actual del package.json
get_current_version() {
    node -p "require('./package.json').version"
}

# Funci√≥ per incrementar la versi√≥ patch
increment_patch() {
    local version=$1
    local major=$(echo $version | cut -d. -f1)
    local minor=$(echo $version | cut -d. -f2)
    local patch=$(echo $version | cut -d. -f3)
    echo "$major.$minor.$((patch + 1))"
}

# Obtenir la versi√≥ actual
CURRENT_VERSION=$(get_current_version)
echo "üìã Versi√≥ actual: $CURRENT_VERSION"

# Demanar la nova versi√≥
if [ $# -eq 0 ]; then
    DEFAULT_VERSION=$(increment_patch $CURRENT_VERSION)
    echo "üí° Versi√≥ suggerida (patch increment): $DEFAULT_VERSION"
    read -p "üî¢ Introdueix la nova versi√≥ [$DEFAULT_VERSION]: " NEW_VERSION
    NEW_VERSION=${NEW_VERSION:-$DEFAULT_VERSION}

    read -p "üìù Missatge de la release (opcional): " MESSAGE
    MESSAGE=${MESSAGE:-"Release $NEW_VERSION"}
else
    NEW_VERSION=$1
    MESSAGE=${2:-"Release $NEW_VERSION"}
fi

VERSION=$NEW_VERSION

echo "üöÄ Creant release $VERSION..."

# 0. Comprovar si hi ha canvis pendents
echo "üîç Comprovant estat del repositori..."
if ! git diff-index --quiet HEAD --; then
    echo "‚ùå Error: Hi ha canvis sense commit al working directory."
    echo "   Fes commit dels canvis abans de crear una release."
    git status --short
    exit 1
fi

if ! git diff-index --quiet --cached HEAD --; then
    echo "‚ùå Error: Hi ha canvis staged sense commit."
    echo "   Fes commit dels canvis abans de crear una release."
    git status --short
    exit 1
fi

# Comprovar si hi ha commits locals que no s'han pujat
if [ "$(git rev-list --count @{u}..HEAD)" -gt 0 ]; then
    echo "‚ùå Error: Hi ha commits locals que no s'han pujat al repositori remot."
    echo "   Fes push dels commits abans de crear una release."
    echo "   Commits pendents:"
    git log --oneline @{u}..HEAD
    exit 1
fi

echo "‚úÖ Repositori sincronitzat correctament."

# 1. Build del projecte
echo "üî® Compilant el projecte..."
npm run build

# 1. Actualitzar package.json
echo "üì¶ Actualitzant package.json a versi√≥ $VERSION..."
npm version $VERSION --no-git-tag-version

# 2. Commit dels canvis
echo "üìù Fent commit dels canvis..."
git add package.json
git commit -m "Bump version to $VERSION"

# 3. Crear tag
echo "üè∑Ô∏è  Creant tag v$VERSION..."
git tag "v$VERSION"

# 4. Push dels canvis i tag
echo "üì§ Pujant canvis i tag..."
git push origin main
git push origin "v$VERSION"

# 5. Crear release a GitHub (requereix GitHub CLI)
if command -v gh &> /dev/null; then
    echo "üìã Creant release a GitHub..."
    gh release create "v$VERSION" --title "Release $VERSION" --notes "$MESSAGE"
else
    echo "‚ö†Ô∏è  GitHub CLI no est√† instal¬∑lat. Crea la release manualment a GitHub."
    echo "   URL: https://github.com/trevSmart/microscope-mcp-client/releases/new?tag=v$VERSION"
fi

echo "‚úÖ Release $VERSION creat amb √®xit!"
echo "   El workflow de GitHub Actions publicar√† autom√†ticament a npm."
